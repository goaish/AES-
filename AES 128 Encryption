#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define Nb 4           // block size in words
#define Nk 4           // key length in words (4 words = 16 bytes)
#define Nr 10          // number of rounds
#define AES_BLOCK_SIZE 16

uint8_t state[4][4];    // state matrix
uint8_t RoundKey[176];  // expanded key
uint8_t Key[16];        // original 128-bit key

// AES S-box
uint8_t sbox[256] = {
    // 256-byte substitution box
    // truncated version for brevity, fill full values while using
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    // ... fill remaining values
};

// Round constant
uint8_t Rcon[11] = {
    0x00, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36
};

// Utility functions
uint8_t getSBoxValue(uint8_t num) {
    return sbox[num];
}

// Key Expansion
void KeyExpansion() {
    int i, j;
    uint8_t temp[4], k;

    for (i = 0; i < Nk; ++i) {
        RoundKey[i * 4] = Key[i * 4];
        RoundKey[i * 4 + 1] = Key[i * 4 + 1];
        RoundKey[i * 4 + 2] = Key[i * 4 + 2];
        RoundKey[i * 4 + 3] = Key[i * 4 + 3];
    }

    while (i < Nb * (Nr + 1)) {
        for (j = 0; j < 4; ++j)
            temp[j] = RoundKey[(i - 1) * 4 + j];

        if (i % Nk == 0) {
            // Rotate
            k = temp[0];
            temp[0] = getSBoxValue(temp[1]) ^ Rcon[i / Nk];
            temp[1] = getSBoxValue(temp[2]);
            temp[2] = getSBoxValue(temp[3]);
            temp[3] = getSBoxValue(k);
        }

        for (j = 0; j < 4; ++j) {
            RoundKey[i * 4 + j] = RoundKey[(i - Nk) * 4 + j] ^ temp[j];
        }

        i++;
    }
}

// AddRoundKey
void AddRoundKey(int round) {
    int i, j;
    for (i = 0; i < 4; ++i)
        for (j = 0; j < 4; ++j)
            state[j][i] ^= RoundKey[round * Nb * 4 + i * Nb + j];
}

// SubBytes
void SubBytes() {
    int i, j;
    for (i = 0; i < 4; ++i)
        for (j = 0; j < 4; ++j)
            state[i][j] = getSBoxValue(state[i][j]);
}

// ShiftRows
void ShiftRows() {
    uint8_t temp;

    // Row 1
    temp = state[1][0];
    state[1][0] = state[1][1];
    state[1][1] = state[1][2];
    state[1][2] = state[1][3];
    state[1][3] = temp;

    // Row 2
    temp = state[2][0];
    state[2][0] = state[2][2];
    state[2][2] = temp;
    temp = state[2][1];
    state[2][1] = state[2][3];
    state[2][3] = temp;

    // Row 3
    temp = state[3][0];
    state[3][0] = state[3][3];
    state[3][3] = state[3][2];
    state[3][2] = state[3][1];
    state[3][1] = temp;
}

// MixColumns
#define xtime(x) ((x << 1) ^ (((x >> 7) & 1) * 0x1b))

void MixColumns() {
    uint8_t i, Tmp, Tm, t;
    for (i = 0; i < 4; ++i) {
        t = state[0][i];
        Tmp = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i];
        Tm = state[0][i] ^ state[1][i]; Tm = xtime(Tm); state[0][i] ^= Tm ^ Tmp;
        Tm = state[1][i] ^ state[2][i]; Tm = xtime(Tm); state[1][i] ^= Tm ^ Tmp;
        Tm = state[2][i] ^ state[3][i]; Tm = xtime(Tm); state[2][i] ^= Tm ^ Tmp;
        Tm = state[3][i] ^ t;           Tm = xtime(Tm); state[3][i] ^= Tm ^ Tmp;
    }
}

// Cipher (Encryption)
void Cipher() {
    int round = 0;

    AddRoundKey(0);

    for (round = 1; round < Nr; ++round) {
        SubBytes();
        ShiftRows();
        MixColumns();
        AddRoundKey(round);
    }

    SubBytes();
    ShiftRows();
    AddRoundKey(Nr);
}

// Main function
int main() {
    int i, j;

    // Sample 16-byte key
    uint8_t key[16] = {
        0x2b, 0x7e, 0x15, 0x16,
        0x28, 0xae, 0xd2, 0xa6,
        0xab, 0xf7, 0x15, 0x88,
        0x09, 0xcf, 0x4f, 0x3c
    };

    // Sample 16-byte plaintext
    uint8_t input[16] = {
        0x32, 0x43, 0xf6, 0xa8,
        0x88, 0x5a, 0x30, 0x8d,
        0x31, 0x31, 0x98, 0xa2,
        0xe0, 0x37, 0x07, 0x34
    };

    memcpy(Key, key, 16);
    KeyExpansion();

    // Load input into state
    for (i = 0; i < 4; ++i)
        for (j = 0; j < 4; ++j)
            state[j][i] = input[i * 4 + j];

    Cipher();

    // Output encrypted text
    printf("Encrypted Ciphertext:\n");
    for (i = 0; i < 4; ++i)
        for (j = 0; j < 4; ++j)
            printf("%02x ", state[j][i]);

    printf("\n");
    return 0;
}
